//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxAnimCurveNode : FbxObject {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxAnimCurveNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxAnimCurveNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxAnimCurveNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static SWIGTYPE_p_FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxAnimCurveNode_ClassId_set(SWIGTYPE_p_FbxClassId.getCPtr(value));
      if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_FbxClassId ret = new SWIGTYPE_p_FbxClassId(fbx_wrapperPINVOKE.FbxAnimCurveNode_ClassId_get(), true);
      if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override SWIGTYPE_p_FbxClassId GetClassId() {
    SWIGTYPE_p_FbxClassId ret = new SWIGTYPE_p_FbxClassId(fbx_wrapperPINVOKE.FbxAnimCurveNode_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxAnimCurveNode Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    return ret;
  }

  public new static FbxAnimCurveNode Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    return ret;
  }

  public bool IsAnimated(bool pRecurse) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_IsAnimated__SWIG_0(swigCPtr, pRecurse);
    return ret;
  }

  public bool IsAnimated() {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_IsAnimated__SWIG_1(swigCPtr);
    return ret;
  }

  public bool GetAnimationInterval(SWIGTYPE_p_FbxTimeSpan pTimeInterval) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetAnimationInterval(swigCPtr, SWIGTYPE_p_FbxTimeSpan.getCPtr(pTimeInterval));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsComposite() {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_IsComposite(swigCPtr);
    return ret;
  }

  public FbxAnimCurveNode Find(string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_Find(swigCPtr, pName);
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    return ret;
  }

  public static FbxAnimCurveNode CreateTypedCurveNode(FbxProperty pProperty, FbxScene pScene) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_CreateTypedCurveNode(FbxProperty.getCPtr(pProperty), FbxScene.getCPtr(pScene));
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetChannelsCount() {
    uint ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetChannelsCount(swigCPtr);
    return ret;
  }

  public int GetChannelIndex(string pChannelName) {
    int ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetChannelIndex(swigCPtr, pChannelName);
    return ret;
  }

  public SWIGTYPE_p_FbxString GetChannelName(int pChannelId) {
    SWIGTYPE_p_FbxString ret = new SWIGTYPE_p_FbxString(fbx_wrapperPINVOKE.FbxAnimCurveNode_GetChannelName(swigCPtr, pChannelId), true);
    return ret;
  }

  public void ResetChannels() {
    fbx_wrapperPINVOKE.FbxAnimCurveNode_ResetChannels(swigCPtr);
  }

  public bool DisconnectFromChannel(SWIGTYPE_p_FbxAnimCurve pCurve, uint pChnlId) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_DisconnectFromChannel(swigCPtr, SWIGTYPE_p_FbxAnimCurve.getCPtr(pCurve), pChnlId);
    return ret;
  }

  public bool ConnectToChannel(SWIGTYPE_p_FbxAnimCurve pCurve, string pChnl, bool pInFront) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_ConnectToChannel__SWIG_0(swigCPtr, SWIGTYPE_p_FbxAnimCurve.getCPtr(pCurve), pChnl, pInFront);
    return ret;
  }

  public bool ConnectToChannel(SWIGTYPE_p_FbxAnimCurve pCurve, string pChnl) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_ConnectToChannel__SWIG_1(swigCPtr, SWIGTYPE_p_FbxAnimCurve.getCPtr(pCurve), pChnl);
    return ret;
  }

  public bool ConnectToChannel(SWIGTYPE_p_FbxAnimCurve pCurve, uint pChnlId, bool pInFront) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_ConnectToChannel__SWIG_2(swigCPtr, SWIGTYPE_p_FbxAnimCurve.getCPtr(pCurve), pChnlId, pInFront);
    return ret;
  }

  public bool ConnectToChannel(SWIGTYPE_p_FbxAnimCurve pCurve, uint pChnlId) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_ConnectToChannel__SWIG_3(swigCPtr, SWIGTYPE_p_FbxAnimCurve.getCPtr(pCurve), pChnlId);
    return ret;
  }

  public SWIGTYPE_p_FbxAnimCurve CreateCurve(string pCurveNodeName, string pChannel) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_CreateCurve__SWIG_0(swigCPtr, pCurveNodeName, pChannel);
    SWIGTYPE_p_FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxAnimCurve(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_FbxAnimCurve CreateCurve(string pCurveNodeName, uint pChannelId) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_CreateCurve__SWIG_1(swigCPtr, pCurveNodeName, pChannelId);
    SWIGTYPE_p_FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxAnimCurve(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_FbxAnimCurve CreateCurve(string pCurveNodeName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_CreateCurve__SWIG_2(swigCPtr, pCurveNodeName);
    SWIGTYPE_p_FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxAnimCurve(cPtr, false);
    return ret;
  }

  public int GetCurveCount(uint pChannelId, string pCurveNodeName) {
    int ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetCurveCount__SWIG_0(swigCPtr, pChannelId, pCurveNodeName);
    return ret;
  }

  public int GetCurveCount(uint pChannelId) {
    int ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetCurveCount__SWIG_1(swigCPtr, pChannelId);
    return ret;
  }

  public SWIGTYPE_p_FbxAnimCurve GetCurve(uint pChannelId, uint pId, string pCurveNodeName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetCurve__SWIG_0(swigCPtr, pChannelId, pId, pCurveNodeName);
    SWIGTYPE_p_FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxAnimCurve(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_FbxAnimCurve GetCurve(uint pChannelId, uint pId) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetCurve__SWIG_1(swigCPtr, pChannelId, pId);
    SWIGTYPE_p_FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxAnimCurve(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_FbxAnimCurve GetCurve(uint pChannelId) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetCurve__SWIG_2(swigCPtr, pChannelId);
    SWIGTYPE_p_FbxAnimCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxAnimCurve(cPtr, false);
    return ret;
  }

  public override FbxObject Copy(FbxObject pObject) {
    FbxObject ret = new FbxObject(fbx_wrapperPINVOKE.FbxAnimCurveNode_Copy(swigCPtr, FbxObject.getCPtr(pObject)), false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string CurveNodeNameFrom(string pName) {
    string ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_CurveNodeNameFrom(pName);
    return ret;
  }

  public static bool EvaluateChannels(FbxAnimCurveNode pCurveNode, SWIGTYPE_p_double pData, uint pCount, SWIGTYPE_p_FbxTime pTime) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_EvaluateChannels(FbxAnimCurveNode.getCPtr(pCurveNode), SWIGTYPE_p_double.getCPtr(pData), pCount, SWIGTYPE_p_FbxTime.getCPtr(pTime));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ReleaseKFCurveNode() {
    fbx_wrapperPINVOKE.FbxAnimCurveNode_ReleaseKFCurveNode(swigCPtr);
  }

  public void SyncChannelsWithKFCurve() {
    fbx_wrapperPINVOKE.FbxAnimCurveNode_SyncChannelsWithKFCurve(swigCPtr);
  }

  public bool UseQuaternionInterpolation() {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_UseQuaternionInterpolation(swigCPtr);
    return ret;
  }

  public bool SetQuaternionInterpolation(ushort pVal) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_SetQuaternionInterpolation(swigCPtr, pVal);
    return ret;
  }

  public ushort GetQuaternionInterpolation() {
    ushort ret = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetQuaternionInterpolation(swigCPtr);
    return ret;
  }

  public void SetKFCurveNodeLayerType(FbxProperty pProp) {
    fbx_wrapperPINVOKE.FbxAnimCurveNode_SetKFCurveNodeLayerType(swigCPtr, FbxProperty.getCPtr(pProp));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_KFCurveNode GetKFCurveNode(bool pNoCreate) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetKFCurveNode__SWIG_0(swigCPtr, pNoCreate);
    SWIGTYPE_p_KFCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_KFCurveNode(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_KFCurveNode GetKFCurveNode() {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimCurveNode_GetKFCurveNode__SWIG_1(swigCPtr);
    SWIGTYPE_p_KFCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_KFCurveNode(cPtr, false);
    return ret;
  }

}

}
