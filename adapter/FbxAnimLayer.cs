//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Fbx {

public class FbxAnimLayer : FbxCollection {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal FbxAnimLayer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(fbx_wrapperPINVOKE.FbxAnimLayer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(FbxAnimLayer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public static SWIGTYPE_p_FbxClassId ClassId {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_ClassId_set(SWIGTYPE_p_FbxClassId.getCPtr(value));
      if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_FbxClassId ret = new SWIGTYPE_p_FbxClassId(fbx_wrapperPINVOKE.FbxAnimLayer_ClassId_get(), true);
      if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public override SWIGTYPE_p_FbxClassId GetClassId() {
    SWIGTYPE_p_FbxClassId ret = new SWIGTYPE_p_FbxClassId(fbx_wrapperPINVOKE.FbxAnimLayer_GetClassId(swigCPtr), true);
    return ret;
  }

  public new static FbxAnimLayer Create(FbxManager pManager, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_Create__SWIG_0(FbxManager.getCPtr(pManager), pName);
    FbxAnimLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimLayer(cPtr, false);
    return ret;
  }

  public new static FbxAnimLayer Create(FbxObject pContainer, string pName) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_Create__SWIG_1(FbxObject.getCPtr(pContainer), pName);
    FbxAnimLayer ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimLayer(cPtr, false);
    return ret;
  }

  public FbxPropertyDouble Weight {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_Weight_set(swigCPtr, FbxPropertyDouble.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_Weight_get(swigCPtr);
      FbxPropertyDouble ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyDouble(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyBool Mute {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_Mute_set(swigCPtr, FbxPropertyBool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_Mute_get(swigCPtr);
      FbxPropertyBool ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyBool(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyBool Solo {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_Solo_set(swigCPtr, FbxPropertyBool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_Solo_get(swigCPtr);
      FbxPropertyBool ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyBool(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyBool Lock {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_Lock_set(swigCPtr, FbxPropertyBool.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_Lock_get(swigCPtr);
      FbxPropertyBool ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyBool(cPtr, false);
      return ret;
    } 
  }

  public FbxPropertyDouble3 Color {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_Color_set(swigCPtr, FbxPropertyDouble3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_Color_get(swigCPtr);
      FbxPropertyDouble3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxPropertyDouble3(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_int_t BlendMode {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_BlendMode_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_BlendMode_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_int_t RotationAccumulationMode {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_RotationAccumulationMode_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_RotationAccumulationMode_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_int_t(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_FbxPropertyTT_int_t ScaleAccumulationMode {
    set {
      fbx_wrapperPINVOKE.FbxAnimLayer_ScaleAccumulationMode_set(swigCPtr, SWIGTYPE_p_FbxPropertyTT_int_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_ScaleAccumulationMode_get(swigCPtr);
      SWIGTYPE_p_FbxPropertyTT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_FbxPropertyTT_int_t(cPtr, false);
      return ret;
    } 
  }

  public void Reset() {
    fbx_wrapperPINVOKE.FbxAnimLayer_Reset(swigCPtr);
  }

  public void SetBlendModeBypass(SWIGTYPE_p_EFbxType pType, bool pState) {
    fbx_wrapperPINVOKE.FbxAnimLayer_SetBlendModeBypass(swigCPtr, SWIGTYPE_p_EFbxType.getCPtr(pType), pState);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetBlendModeBypass(SWIGTYPE_p_EFbxType pType) {
    bool ret = fbx_wrapperPINVOKE.FbxAnimLayer_GetBlendModeBypass(swigCPtr, SWIGTYPE_p_EFbxType.getCPtr(pType));
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public FbxAnimCurveNode CreateCurveNode(FbxProperty pProperty) {
    global::System.IntPtr cPtr = fbx_wrapperPINVOKE.FbxAnimLayer_CreateCurveNode(swigCPtr, FbxProperty.getCPtr(pProperty));
    FbxAnimCurveNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new FbxAnimCurveNode(cPtr, false);
    if (fbx_wrapperPINVOKE.SWIGPendingException.Pending) throw fbx_wrapperPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum EBlendMode {
    eBlendAdditive,
    eBlendOverride,
    eBlendOverridePassthrough
  }

  public enum ERotationAccumulationMode {
    eRotationByLayer,
    eRotationByChannel
  }

  public enum EScaleAccumulationMode {
    eScaleMultiply,
    eScaleAdditive
  }

}

}
